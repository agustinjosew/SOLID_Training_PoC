<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".sln" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>

<#
    string solutionDirectory = this.Host.ResolvePath(".");
    string solutionName = "SOLIDPrinciplesSolution";
    CreateSolution(solutionDirectory, solutionName);
#>

<#+
    void CreateSolution(string directory, string solutionName)
    {
        var principles = new Dictionary<string, string> 
        {
            { "SRP", "Single Responsibility Principle: A class should have one, and only one, reason to change." },
            { "OCP", "Open/Closed Principle: Software entities should be open for extension, but closed for modification." },
            { "LSP", "Liskov Substitution Principle: Derived classes must be substitutable for their base classes." },
            { "ISP", "Interface Segregation Principle: Make fine grained interfaces that are client specific." },
            { "DIP", "Dependency Inversion Principle: Depend on abstractions, not on concretions." }
        };

        StringBuilder slnContent = new StringBuilder();

        foreach (var principle in principles)
        {
            string projectDirectory = Path.Combine(directory, principle.Key);
            Directory.CreateDirectory(projectDirectory);

            string csprojPath = CreateProjectFile(projectDirectory, principle.Key);
            string projectGuid = Guid.NewGuid().ToString("B").ToUpper();

            slnContent.AppendLine($"Project(\"{{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}}\") = \"{principle.Key}\", \"{principle.Key}\\{principle.Key}.csproj\", \"{projectGuid}\"");
            slnContent.AppendLine("EndProject");

            CreateClassFile(projectDirectory, principle.Key);
            CreateDescriptionFile(projectDirectory, principle.Key, principle.Value);
        }

        string slnFilePath = Path.Combine(directory, $"{solutionName}.sln");
        File.WriteAllText(slnFilePath, slnContent.ToString());
    }

    string CreateProjectFile(string directory, string projectName)
    {
        string csprojContent =
$@"<Project Sdk=""Microsoft.NET.Sdk"">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
  </PropertyGroup>
</Project>";

        string csprojPath = Path.Combine(directory, $"{projectName}.csproj");
        File.WriteAllText(csprojPath, csprojContent);
        return csprojPath;
    }

    void CreateClassFile(string projectDirectory, string principleName)
    {
        string className = $"{principleName}Example";
        string classContent = $@"using System;

namespace {principleName}
{{
    public class {className}
    {{
        // Your class code for the {principleName} principle goes here
    }}
}}";

        string classFilePath = Path.Combine(projectDirectory, $"{className}.cs");
        File.WriteAllText(classFilePath, classContent);
    }

    void CreateDescriptionFile(string projectDirectory, string principleName, string description)
    {
        string descriptionFileName = $"{principleName}Description.txt";
        string descriptionFilePath = Path.Combine(projectDirectory, descriptionFileName);

        File.WriteAllText(descriptionFilePath, description);
    }
#>

