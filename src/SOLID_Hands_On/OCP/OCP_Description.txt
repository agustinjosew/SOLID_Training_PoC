Open/Closed Principle: Software entities should be open for extension, but closed for modification.

The Open/Closed Principle (OCP) states that software entities (classes, modules, functions) should be open for extension but closed for modification.

This principle encourages you to design your code in a way that allows you to add new features or functionality without altering existing code.

Examples of violations:
Hardcoded Rules: A payment processing class with hard-coded discount rules, requiring changes to the class’s code for each new discount.
Conditional Checks: A shape drawing application that uses long chains of if statements to determine how to draw each shape, instead of extending the application for new shapes without modifying existing code.
Limited Extension Points: A plugin system that only allows extensions defined in a specific assembly, preventing external plugins from extending the system.